import{_ as o,r as i,o as l,c,a as n,b as s,w as t,d as a,e as u}from"./app-JsnHbJRr.js";const r={},d=n("h1",{id:"说说你对vue的mixin的理解-有什么应用场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#说说你对vue的mixin的理解-有什么应用场景"},[n("span",null,"说说你对vue的mixin的理解，有什么应用场景？")])],-1),k={class:"table-of-contents"},v=u(`<h2 id="mixin是什么" tabindex="-1"><a class="header-anchor" href="#mixin是什么"><span>mixin是什么</span></a></h2><p>Mixin是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问mixin类的方法而不必成为其子类</p><p>Mixin类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂</p><h2 id="vue中的mixin" tabindex="-1"><a class="header-anchor" href="#vue中的mixin"><span>Vue中的mixin</span></a></h2><div class="custom-container tip"><p class="custom-container-title">先来看一下官方定义</p><p>mixin（混入），提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p></div><p>本质其实就是一个js对象，它可以包含我们组件中任意功能选项，如data、components、methods、created、computed等等</p><p>我们只要将共用的功能以对象的方式传入 mixins选项中，当组件使用 mixins对象时所有mixins对象的选项都将被混入该组件本身的选项中来</p><p>在Vue中我们可以局部混入跟全局混入</p><h3 id="局部混入" tabindex="-1"><a class="header-anchor" href="#局部混入"><span>局部混入</span></a></h3><p>定义一个mixin对象，有组件options的data、methods属性</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myMixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello from mixin!&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件通过mixins属性调用mixin对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;componentA&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该组件在使用的时候，混合了mixin里面的方法，在自动执行created生命钩子，执行hello方法</p><h3 id="全局混入" tabindex="-1"><a class="header-anchor" href="#全局混入"><span>全局混入</span></a></h3><p>通过Vue.mixin()进行全局的混入</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;全局混入&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件）</p><p>PS：全局混入常用于插件的编写</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项：</span></a></h3><p>当组件存在与mixin对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖mixin的选项</p><p>但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行mixin的钩子，再执行组件的钩子</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立</p><p>这时，可以通过Vue的mixin功能将相同或者相似的代码提出来</p><p>举个例子</p><p>定义一个modal弹窗组件，内部通过isShowing来控制显示</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#modal&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">isShowing</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个tooltip提示框，内部通过isShowing来控制显示</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Tooltip <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#tooltip&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">isShowing</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过观察上面两个组件，发现两者的逻辑是相同，代码控制显示也是相同的，这时候mixin就派上用场了</p><p>首先抽出共同代码，编写一个mixin</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">isShowing</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个组件在使用上，只需要引入mixin</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#modal&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>toggle<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> Tooltip <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#tooltip&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>toggle<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面小小的例子，让我们知道了Mixin对于封装一些可复用的功能如此有趣、方便、实用</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ul><li>替换型策略有props、methods、inject、computed，就是将新的同名参数替代旧的参数</li><li>合并型策略是data, 通过set方法进行合并和重新赋值</li><li>队列型策略有生命周期函数和watch，原理是将函数存入一个数组，然后正序遍历依次执行</li><li>叠加型有component、directives、filters，通过原型链进行层层的叠加</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,39),m={href:"https://zhuanlan.zhihu.com/p/31018570",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844904015495446536#heading-1",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903846775357453",target:"_blank",rel:"noopener noreferrer"},x={href:"https://vue3js.cn/docs/zh",target:"_blank",rel:"noopener noreferrer"};function g(f,y){const e=i("router-link"),p=i("ExternalLinkIcon");return l(),c("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(e,{to:"#mixin是什么"},{default:t(()=>[a("mixin是什么")]),_:1})]),n("li",null,[s(e,{to:"#vue中的mixin"},{default:t(()=>[a("Vue中的mixin")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#局部混入"},{default:t(()=>[a("局部混入")]),_:1})]),n("li",null,[s(e,{to:"#全局混入"},{default:t(()=>[a("全局混入")]),_:1})]),n("li",null,[s(e,{to:"#注意事项"},{default:t(()=>[a("注意事项：")]),_:1})])])]),n("li",null,[s(e,{to:"#使用场景"},{default:t(()=>[a("使用场景")]),_:1})]),n("li",null,[s(e,{to:"#小结"},{default:t(()=>[a("小结")]),_:1})]),n("li",null,[s(e,{to:"#参考文献"},{default:t(()=>[a("参考文献")]),_:1})])])]),v,n("ul",null,[n("li",null,[n("a",m,[a("https://zhuanlan.zhihu.com/p/31018570"),s(p)])]),n("li",null,[n("a",h,[a("https://juejin.cn/post/6844904015495446536#heading-1"),s(p)])]),n("li",null,[n("a",b,[a("https://juejin.cn/post/6844903846775357453"),s(p)])]),n("li",null,[n("a",x,[a("https://vue3js.cn/docs/zh"),s(p)])])])])}const w=o(r,[["render",g],["__file","index.html.vue"]]),j=JSON.parse('{"path":"/interview/vue/mixin/","title":"说说你对vue的mixin的理解，有什么应用场景？","lang":"zh-CN","frontmatter":{"title":"说说你对vue的mixin的理解，有什么应用场景？","sidebarDepth":0,"date":"2024-05-17T00:00:00.000Z"},"headers":[{"level":2,"title":"mixin是什么","slug":"mixin是什么","link":"#mixin是什么","children":[]},{"level":2,"title":"Vue中的mixin","slug":"vue中的mixin","link":"#vue中的mixin","children":[{"level":3,"title":"局部混入","slug":"局部混入","link":"#局部混入","children":[]},{"level":3,"title":"全局混入","slug":"全局混入","link":"#全局混入","children":[]},{"level":3,"title":"注意事项：","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"updatedTime":1715936165000,"contributors":[{"name":"chenxt","email":"chenxt@power-www.com","commits":1}]},"filePathRelative":"interview/vue/mixin/index.md"}');export{w as comp,j as data};
