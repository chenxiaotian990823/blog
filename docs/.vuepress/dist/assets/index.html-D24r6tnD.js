import{_ as l,r as o,o as i,c,a as n,b as s,w as e,d as a,e as r}from"./app-DtNyoU9e.js";const u={},d=n("h1",{id:"你是怎么处理-vue-项目中的错误的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#你是怎么处理-vue-项目中的错误的"},[n("span",null,"你是怎么处理 vue 项目中的错误的？")])],-1),k={class:"table-of-contents"},v=r(`<h2 id="错误类型" tabindex="-1"><a class="header-anchor" href="#错误类型"><span>错误类型</span></a></h2><p>任何一个框架，对于错误的处理都是一种必备的能力</p><p>在 Vue 中，则是定义了一套对应的错误处理规则给到使用者，且在源代码级别，对部分必要的过程做了一定的错误处理。</p><p>主要的错误来源包括：</p><ul><li>后端接口错误</li><li>代码中本身逻辑错误</li></ul><h2 id="如何处理" tabindex="-1"><a class="header-anchor" href="#如何处理"><span>如何处理</span></a></h2><h3 id="后端接口错误" tabindex="-1"><a class="header-anchor" href="#后端接口错误"><span>后端接口错误</span></a></h3><p>通过 axios 的 interceptor 实现网络请求的 response 先进行一层拦截</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>apiClient<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> response
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Login&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码逻辑问题" tabindex="-1"><a class="header-anchor" href="#代码逻辑问题"><span>代码逻辑问题</span></a></h3><h4 id="全局设置错误处理" tabindex="-1"><a class="header-anchor" href="#全局设置错误处理"><span>全局设置错误处理</span></a></h4><p>设置全局错误处理函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle error</span>
  <span class="token comment">// \`info\` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span>
  <span class="token comment">// 只在 2.2.0+ 可用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>errorHandler 指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例</p><p>不过值得注意的是，在不同 Vue 版本中，该全局 API 作用的范围会有所不同：</p><blockquote><p>从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 undefined 时，被捕获的错误会通过 console.error 输出而避免应用崩</p></blockquote><blockquote><p>从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了</p></blockquote><blockquote><p>从 2.6.0 起，这个钩子也会捕获 v-on DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理</p></blockquote><h4 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子"><span>生命周期钩子</span></a></h4><p>errorCaptured 是 2.5.0 新增的一个生命钩子函数，当捕获到一个来自子孙组件的错误时被调用</p><p>基本类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">err</span><span class="token operator">:</span> Error<span class="token punctuation">,</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">?</span>boolean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播</p><p>参考官网，错误传播规则如下：</p><ul><li>默认情况下，如果全局的 config.errorHandler 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报</li><li>如果一个组件的继承或父级从属链路中存在多个 errorCaptured 钩子，则它们将会被相同的错误逐个唤起。</li><li>如果此 errorCaptured 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 config.errorHandler</li><li>一个 errorCaptured 钩子能够返回 false 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler</li></ul><p>下面来看个例子</p><p>定义一个父组件 cat</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        &lt;div&gt;
			&lt;h1&gt;Cat: &lt;/h1&gt;
        	&lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">errorCaptured</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">cat EC: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\ninfo: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>info<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个子组件 kitten，其中 dontexist()并没有定义，存在错误</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;kitten&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;&lt;h1&gt;Kitten: {{ dontexist() }}&lt;/h1&gt;&lt;/div&gt;&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面中使用组件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> v<span class="token operator">-</span>cloak<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>cat name<span class="token operator">=</span><span class="token string">&quot;my cat&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>kitten<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>kitten<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>cat<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在父组件的errorCaptured则能够捕获到信息</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>cat <span class="token constant">EC</span><span class="token operator">:</span> TypeError<span class="token operator">:</span> dontexist is not a <span class="token keyword">function</span>
<span class="token literal-property property">info</span><span class="token operator">:</span> render
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,35),m={href:"https://juejin.cn/post/6844904096936230925",target:"_blank",rel:"noopener noreferrer"},b={href:"https://segmentfault.com/a/1190000018606181",target:"_blank",rel:"noopener noreferrer"};function g(h,f){const t=o("router-link"),p=o("ExternalLinkIcon");return i(),c("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(t,{to:"#错误类型"},{default:e(()=>[a("错误类型")]),_:1})]),n("li",null,[s(t,{to:"#如何处理"},{default:e(()=>[a("如何处理")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#后端接口错误"},{default:e(()=>[a("后端接口错误")]),_:1})]),n("li",null,[s(t,{to:"#代码逻辑问题"},{default:e(()=>[a("代码逻辑问题")]),_:1})])])]),n("li",null,[s(t,{to:"#参考文献"},{default:e(()=>[a("参考文献")]),_:1})])])]),v,n("ul",null,[n("li",null,[n("a",m,[a("https://juejin.cn/post/6844904096936230925"),s(p)])]),n("li",null,[n("a",b,[a("https://segmentfault.com/a/1190000018606181"),s(p)])])])])}const _=l(u,[["render",g],["__file","index.html.vue"]]),j=JSON.parse('{"path":"/interview/vue/handleFault/","title":"你是怎么处理vue项目中的错误的？","lang":"zh-CN","frontmatter":{"title":"你是怎么处理vue项目中的错误的？","sidebarDepth":0,"date":"2024-05-17T00:00:00.000Z"},"headers":[{"level":2,"title":"错误类型","slug":"错误类型","link":"#错误类型","children":[]},{"level":2,"title":"如何处理","slug":"如何处理","link":"#如何处理","children":[{"level":3,"title":"后端接口错误","slug":"后端接口错误","link":"#后端接口错误","children":[]},{"level":3,"title":"代码逻辑问题","slug":"代码逻辑问题","link":"#代码逻辑问题","children":[]}]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"updatedTime":1715936165000,"contributors":[{"name":"chenxt","email":"chenxt@power-www.com","commits":1}]},"filePathRelative":"interview/vue/handleFault/index.md"}');export{_ as comp,j as data};
