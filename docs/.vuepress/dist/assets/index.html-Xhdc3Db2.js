import{_ as l,r as o,o as i,c as r,a as s,b as a,w as t,d as n,e as c}from"./app-DFCVeU-Q.js";const u={},d=s("h1",{id:"vue-常用的修饰符有哪些-有什么应用场景",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vue-常用的修饰符有哪些-有什么应用场景"},[s("span",null,"Vue 常用的修饰符有哪些？有什么应用场景？")])],-1),k={class:"table-of-contents"},v=c(`<h2 id="修饰符是什么在程序世界里-修饰符是用于限定类型以及类型成员的声明的一种符号" tabindex="-1"><a class="header-anchor" href="#修饰符是什么在程序世界里-修饰符是用于限定类型以及类型成员的声明的一种符号"><span>修饰符是什么在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号</span></a></h2><p>在 Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理</p><p>vue 中修饰符分为以下五种：</p><ul><li>表单修饰符</li><li>事件修饰符</li><li>鼠标按键修饰符</li><li>键值修饰符</li><li>v-bind 修饰符</li></ul><h2 id="修饰符的作用" tabindex="-1"><a class="header-anchor" href="#修饰符的作用"><span>修饰符的作用</span></a></h2><h3 id="表单修饰符" tabindex="-1"><a class="header-anchor" href="#表单修饰符"><span>表单修饰符</span></a></h3><p>在我们填写表单的时候用得最多的是 input 标签，指令用得最多的是 v-model</p><p>关于表单的修饰符有如下：</p><ul><li><p>lazy</p><p>在我们填完信息，光标离开标签的时候，才会将值赋予给 value，也就是在 change 事件之后再进行信息同步</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>trim</p><p>自动过滤用户输入的首空格字符，而中间的空格不会过滤</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>number</p><p>自动将用户的输入值转为数值类型，但如果这个值无法被 parseFloat 解析，则会返回原来的值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">&quot;age&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符"><span>事件修饰符</span></a></h3><p>事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符：</p><ul><li><p>stop</p><p>阻止了事件冒泡，相当于调用了 event.stopPropagation 方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>div @click<span class="token operator">=</span><span class="token string">&quot;shout(2)&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">//只输出1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>prevent</p><p>阻止了事件的默认行为，相当于调用了 event.preventDefault 方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>form v<span class="token operator">-</span>on<span class="token operator">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;onSubmit&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>self</p><p>只当在 event.target 是当前元素自身时触发处理函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">&quot;doThat&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击</p></blockquote></li><li><p>once</p><p>绑定了事件以后只能触发一次，第二次就不会触发</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>capture</p><p>使事件触发从包含这个元素的顶层开始往下触发</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>
  obj1
<span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;shout(2)&quot;</span><span class="token operator">&gt;</span>
  obj2
<span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(3)&quot;</span><span class="token operator">&gt;</span>
  obj3
<span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(4)&quot;</span><span class="token operator">&gt;</span>
  obj4
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// 输出结构: 1 2 4 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>passive</p><p>在移动端，当我们在监听元素滚动事件的时候，会一直触发 onscroll 事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给 onscroll 事件整了一个.lazy 修饰符</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span>
<span class="token comment">&lt;!-- 而不会等待 \`onScroll\` 完成  --&gt;</span>
<span class="token comment">&lt;!-- 这其中包含 \`event.preventDefault()\` 的情况 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>scroll.passive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onScroll<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不要把 .passive 和 .prevent 一起使用,因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。 passive 会告诉浏览器你不想阻止事件的默认行为</p></blockquote></li><li><p>native</p><p>让组件变成像 html 内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>my<span class="token operator">-</span>component v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>native<span class="token operator">=</span><span class="token string">&quot;doSomething&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：使用.native 修饰符来操作普通 HTML 标签是会令事件失效的</p></blockquote></li></ul><h3 id="鼠标按钮修饰符" tabindex="-1"><a class="header-anchor" href="#鼠标按钮修饰符"><span>鼠标按钮修饰符</span></a></h3><p>鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：</p><ul><li>left 左键点击</li><li>right 右键点击</li><li>middle 中键点击</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>middle<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="键盘修饰符" tabindex="-1"><a class="header-anchor" href="#键盘修饰符"><span>键盘修饰符</span></a></h3><p>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：</p><p>keyCode 存在很多，但 vue 为我们提供了别名，分为以下两种：</p><ul><li>普通键（enter、tab、delete、space、esc、up...）</li><li>系统修饰键（ctrl、alt、meta、shift...）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 只有按键为keyCode的时候才触发</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> @keyup<span class="token punctuation">.</span>keyCode<span class="token operator">=</span><span class="token string">&quot;shout()&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过以下方式自定义一些全局的键盘码别名</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f2 <span class="token operator">=</span> <span class="token number">113</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="v-bind-修饰符" tabindex="-1"><a class="header-anchor" href="#v-bind-修饰符"><span>v-bind 修饰符</span></a></h3><p>v-bind 修饰符主要是为属性进行操作，用来分别有如下：</p><ul><li><p>async</p><p>能对 props 进行一个双向绑定</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//父组件</span>
<span class="token operator">&lt;</span>comp <span class="token operator">:</span>myMessage<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;bar&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">&gt;</span>
<span class="token comment">//子组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:myMessage&#39;</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这种方法相当于以下的简写</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//父亲组件</span>
<span class="token operator">&lt;</span>comp <span class="token operator">:</span>myMessage<span class="token operator">=</span><span class="token string">&quot;bar&quot;</span> @update<span class="token operator">:</span>myMessage<span class="token operator">=</span><span class="token string">&quot;func&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">&gt;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//子组件js</span>
<span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:myMessage&#39;</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用async需要注意以下两点：</p><ul><li><p>使用sync的时候，子组件传递的事件名格式必须为update:value，其中value必须与子组件中props中声明的名称完全一致</p></li><li><p>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用</p></li><li><p>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的</p></li></ul></li><li><p>prop</p><p>设置自定义标签属性，避免暴露数据，防止污染HTML结构</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;uid&quot;</span> title<span class="token operator">=</span><span class="token string">&quot;title1&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> <span class="token operator">:</span>index<span class="token punctuation">.</span>prop<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>camel</p><p>将命名变为驼峰命名法，如将view-Box属性名转换为 viewBox</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>svg <span class="token operator">:</span>viewBox<span class="token operator">=</span><span class="token string">&quot;viewBox&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景：</p><ul><li>.stop：阻止事件冒泡</li><li>.native：绑定原生事件</li><li>.once：事件只执行一次</li><li>.self ：将事件绑定在自身身上，相当于阻止事件冒泡</li><li>.prevent：阻止默认事件</li><li>.caption：用于事件捕获</li><li>.once：只触发一次</li><li>.keyCode：监听特定键盘按下</li><li>.right：右键</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,30),m={href:"https://segmentfault.com/a/1190000016786254",target:"_blank",rel:"noopener noreferrer"},g={href:"https://vue3js.cn/docs/zh",target:"_blank",rel:"noopener noreferrer"};function b(h,j){const e=o("router-link"),p=o("ExternalLinkIcon");return i(),r("div",null,[d,s("nav",k,[s("ul",null,[s("li",null,[a(e,{to:"#修饰符是什么在程序世界里-修饰符是用于限定类型以及类型成员的声明的一种符号"},{default:t(()=>[n("修饰符是什么在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号")]),_:1})]),s("li",null,[a(e,{to:"#修饰符的作用"},{default:t(()=>[n("修饰符的作用")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#表单修饰符"},{default:t(()=>[n("表单修饰符")]),_:1})]),s("li",null,[a(e,{to:"#事件修饰符"},{default:t(()=>[n("事件修饰符")]),_:1})]),s("li",null,[a(e,{to:"#鼠标按钮修饰符"},{default:t(()=>[n("鼠标按钮修饰符")]),_:1})]),s("li",null,[a(e,{to:"#键盘修饰符"},{default:t(()=>[n("键盘修饰符")]),_:1})]),s("li",null,[a(e,{to:"#v-bind-修饰符"},{default:t(()=>[n("v-bind 修饰符")]),_:1})])])]),s("li",null,[a(e,{to:"#应用场景"},{default:t(()=>[n("应用场景")]),_:1})]),s("li",null,[a(e,{to:"#参考文献"},{default:t(()=>[n("参考文献")]),_:1})])])]),v,s("ul",null,[s("li",null,[s("a",m,[n("https://segmentfault.com/a/1190000016786254"),a(p)])]),s("li",null,[s("a",g,[n("https://vue3js.cn/docs/zh"),a(p)])])])])}const f=l(u,[["render",b],["__file","index.html.vue"]]),x=JSON.parse('{"path":"/interview/vue/modifiers/","title":"Vue常用的修饰符有哪些？有什么应用场景？","lang":"zh-CN","frontmatter":{"title":"Vue常用的修饰符有哪些？有什么应用场景？","sidebarDepth":0,"date":"2024-05-17T00:00:00.000Z"},"headers":[{"level":2,"title":"修饰符是什么在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号","slug":"修饰符是什么在程序世界里-修饰符是用于限定类型以及类型成员的声明的一种符号","link":"#修饰符是什么在程序世界里-修饰符是用于限定类型以及类型成员的声明的一种符号","children":[]},{"level":2,"title":"修饰符的作用","slug":"修饰符的作用","link":"#修饰符的作用","children":[{"level":3,"title":"表单修饰符","slug":"表单修饰符","link":"#表单修饰符","children":[]},{"level":3,"title":"事件修饰符","slug":"事件修饰符","link":"#事件修饰符","children":[]},{"level":3,"title":"鼠标按钮修饰符","slug":"鼠标按钮修饰符","link":"#鼠标按钮修饰符","children":[]},{"level":3,"title":"键盘修饰符","slug":"键盘修饰符","link":"#键盘修饰符","children":[]},{"level":3,"title":"v-bind 修饰符","slug":"v-bind-修饰符","link":"#v-bind-修饰符","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"updatedTime":1715936165000,"contributors":[{"name":"chenxt","email":"chenxt@power-www.com","commits":1}]},"filePathRelative":"interview/vue/modifiers/index.md"}');export{f as comp,x as data};
