import{_ as r,r as u,o as h,c as s,a as e,b as l,w as t,d as a,e as o}from"./app-DtNyoU9e.js";const c={},d=e("h1",{id:"vue介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue介绍"},[e("span",null,"Vue介绍")])],-1),v={class:"table-of-contents"},p=o('<h2 id="vue是什么" tabindex="-1"><a class="header-anchor" href="#vue是什么"><span>vue是什么</span></a></h2><p>Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互PS。</p><h2 id="vue核心特性" tabindex="-1"><a class="header-anchor" href="#vue核心特性"><span>vue核心特性</span></a></h2><h3 id="数据驱动-mvvm" tabindex="-1"><a class="header-anchor" href="#数据驱动-mvvm"><span>数据驱动（MVVM)</span></a></h3><p>MVVM表示的是 Model-View-ViewModel</p><ul><li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li><li>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</li><li>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</li></ul><h3 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化"><span>组件化</span></a></h3><h4 id="_1-什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念-组件-来实现开发的模式-在vue中每一个-vue文件都可以视为一个组件" tabindex="-1"><a class="header-anchor" href="#_1-什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念-组件-来实现开发的模式-在vue中每一个-vue文件都可以视为一个组件"><span>1.什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件</span></a></h4><h4 id="_2-组件化的优势" tabindex="-1"><a class="header-anchor" href="#_2-组件化的优势"><span>2.组件化的优势</span></a></h4><ul><li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</li><li>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</li><li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li></ul><h4 id="_3-指令系统" tabindex="-1"><a class="header-anchor" href="#_3-指令系统"><span>3.指令系统</span></a></h4><p>指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p><ul><li>常用的指令 <ul><li>条件渲染指令 v-if</li><li>列表渲染指令v-for</li><li>属性绑定指令v-bind</li><li>事件绑定指令v-on</li><li>双向数据绑定指令v-model</li></ul></li></ul><h2 id="vue跟传统开发的区别" tabindex="-1"><a class="header-anchor" href="#vue跟传统开发的区别"><span>Vue跟传统开发的区别</span></a></h2><ul><li>Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM</li><li>Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM</li></ul><h2 id="vue和react对比" tabindex="-1"><a class="header-anchor" href="#vue和react对比"><span>Vue和React对比</span></a></h2><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h3><ul><li>都有组件化思想</li><li>都支持服务器端渲染</li><li>都有Virtual DOM（虚拟dom）</li><li>数据驱动视图</li><li>都有支持native的方案：Vue的weex、React的React native</li><li>都有自己的构建工具：Vue的vue-cli、React的Create React App</li></ul><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h3><ul><li>数据流向的不同。react从诞生开始就推崇单向数据流，而Vue是双向数据流</li><li>数据变化的实现原理不同。react使用的是不可变数据，而Vue使用的是可变的数据</li><li>组件化通信的不同。react中我们通过使用回调函数来进行通信的，而Vue中子组件向父组件传递消息有两种方式：事件和回调函数</li><li>diff算法不同。react主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。Vue 使用双向指针，边对比，边更新DOM</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>',21),_={href:"https://segmentfault.com/a/1190000016269636",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zh.wikipedia.org/zh-cn/Vue.js",target:"_blank",rel:"noopener noreferrer"},V={href:"https://zhuanlan.zhihu.com/p/20197803",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/38296857",target:"_blank",rel:"noopener noreferrer"};function x(b,M){const i=u("router-link"),n=u("ExternalLinkIcon");return h(),s("div",null,[d,e("nav",v,[e("ul",null,[e("li",null,[l(i,{to:"#vue是什么"},{default:t(()=>[a("vue是什么")]),_:1})]),e("li",null,[l(i,{to:"#vue核心特性"},{default:t(()=>[a("vue核心特性")]),_:1}),e("ul",null,[e("li",null,[l(i,{to:"#数据驱动-mvvm"},{default:t(()=>[a("数据驱动（MVVM)")]),_:1})]),e("li",null,[l(i,{to:"#组件化"},{default:t(()=>[a("组件化")]),_:1})])])]),e("li",null,[l(i,{to:"#vue跟传统开发的区别"},{default:t(()=>[a("Vue跟传统开发的区别")]),_:1})]),e("li",null,[l(i,{to:"#vue和react对比"},{default:t(()=>[a("Vue和React对比")]),_:1}),e("ul",null,[e("li",null,[l(i,{to:"#相同点"},{default:t(()=>[a("相同点")]),_:1})]),e("li",null,[l(i,{to:"#不同点"},{default:t(()=>[a("不同点")]),_:1})])])]),e("li",null,[l(i,{to:"#参考文献"},{default:t(()=>[a("参考文献")]),_:1})])])]),p,e("ul",null,[e("li",null,[e("a",_,[a("https://segmentfault.com/a/1190000016269636"),l(n)])]),e("li",null,[e("a",f,[a("https://zh.wikipedia.org/zh-cn/Vue.js"),l(n)])]),e("li",null,[e("a",V,[a("https://zhuanlan.zhihu.com/p/20197803"),l(n)])]),e("li",null,[e("a",m,[a("https://zhuanlan.zhihu.com/p/38296857"),l(n)])])])])}const g=r(c,[["render",x],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/interview/vue/introduce/","title":"vue介绍","lang":"zh-CN","frontmatter":{"title":"vue介绍","sidebarDepth":0,"date":"2024-05-16T00:00:00.000Z"},"headers":[{"level":2,"title":"vue是什么","slug":"vue是什么","link":"#vue是什么","children":[]},{"level":2,"title":"vue核心特性","slug":"vue核心特性","link":"#vue核心特性","children":[{"level":3,"title":"数据驱动（MVVM)","slug":"数据驱动-mvvm","link":"#数据驱动-mvvm","children":[]},{"level":3,"title":"组件化","slug":"组件化","link":"#组件化","children":[]}]},{"level":2,"title":"Vue跟传统开发的区别","slug":"vue跟传统开发的区别","link":"#vue跟传统开发的区别","children":[]},{"level":2,"title":"Vue和React对比","slug":"vue和react对比","link":"#vue和react对比","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"updatedTime":1715850582000,"contributors":[{"name":"chenxt","email":"chenxt@power-www.com","commits":1}]},"filePathRelative":"interview/vue/introduce/index.md"}');export{g as comp,w as data};
