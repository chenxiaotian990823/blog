import{_ as i,r as l,o as p,c,a,b as s,w as t,d as n,e as r}from"./app-DPz2NTkK.js";const d={},u=a("h1",{id:"javascript本地存储的方式有哪些-区别及应用场景",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#javascript本地存储的方式有哪些-区别及应用场景"},[a("span",null,"Javascript本地存储的方式有哪些？区别及应用场景？")])],-1),k={class:"table-of-contents"},g=r(`<h2 id="方式" tabindex="-1"><a class="header-anchor" href="#方式"><span>方式</span></a></h2><p>javaScript本地缓存的方法我们主要讲述以下四种：</p><ul><li>cookie</li><li>sessionStorage</li><li>localStorage</li><li>indexedDB</li></ul><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>cookie</span></a></h3><p>Cookie，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 HTTP无状态导致的问题</p><p>作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 cookie有效期、安全性、使用范围的可选属性组成</p><p>但是cookie在每次请求中都会被发送，如果不使用 HTTPS并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 cookie保持登录态的网站上，如果 cookie被窃取，他人很容易利用你的 cookie来假扮成你登录网站</p><p>关于cookie常用的属性如下：</p><ul><li>Expires 用于设置 Cookie 的过期时间</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Expires<span class="token operator">=</span>Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比Expires高）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Max<span class="token operator">-</span>Age<span class="token operator">=</span><span class="token number">604800</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Domain指定了 Cookie 可以送达的主机名</li><li>Path指定了一个 URL路径，这个路径必须出现在要请求的资源的路径中才可以发送 Cookie 首部</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Path<span class="token operator">=</span><span class="token operator">/</span>docs   # <span class="token operator">/</span>docs<span class="token operator">/</span>Web<span class="token operator">/</span> 下的资源会带 Cookie 首部
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>标记为 Secure的 Cookie只应通过被HTTPS协议加密过的请求发送给服务端</li></ul><p>通过上述，我们可以看到cookie又开始的作用并不是为了缓存而设计出来，只是借用了cookie的特性实现缓存</p><p>关于cookie的使用如下</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;名字=值&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于cookie的修改，首先要确定domain和path属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的cookie</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Set<span class="token operator">-</span>Cookie<span class="token operator">:</span>name<span class="token operator">=</span>aa<span class="token punctuation">;</span> domain<span class="token operator">=</span>aa<span class="token punctuation">.</span>net<span class="token punctuation">;</span> path<span class="token operator">=</span><span class="token operator">/</span>  # 服务端设置
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span>name<span class="token operator">=</span>bb<span class="token punctuation">;</span> domain<span class="token operator">=</span>aa<span class="token punctuation">.</span>net<span class="token punctuation">;</span> path<span class="token operator">=</span><span class="token operator">/</span>  # 客户端设置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后cookie的删除，最常用的方法就是给cookie设置一个过期的事件，这样cookie过期后会被浏览器删除</p><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage"><span>localStorage</span></a></h3><p>HTML5新方法，IE8及以上浏览器都兼容</p><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h4><ul><li>生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的</li><li>存储的信息在同一域中是共享的</li><li>当本页操作（新增、修改、删除）了localStorage的时候，本页面不会触发storage事件,但是别的页面会触发storage事件。</li><li>大小：5M（跟浏览器厂商有关系）</li><li>localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li>受同源策略的限制</li></ul><p>下面再看看关于localStorage的使用</p><p>设置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cfangxu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取键名</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//获取第一个键名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一次性清除所有存储</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>localStorage 也不是完美的，它有两个缺点：</p><ul><li>无法像Cookie一样设置过期时间</li><li>只能存入字符串，无法直接存对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;[object, Object]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage"><span>sessionStorage</span></a></h3><p>sessionStorage和 localStorage使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，sessionStorage 将会删除数据</p><h4 id="扩展的前端存储方式" tabindex="-1"><a class="header-anchor" href="#扩展的前端存储方式"><span>扩展的前端存储方式</span></a></h4><p>indexedDB是一种低级API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该API使用索引来实现对该数据的高性能搜索</p><p>虽然 Web Storage对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点：</span></a></h4><ul><li>储存量理论上没有上限</li><li>所有操作都是异步的，相比 LocalStorage 同步操作性能更高，尤其是数据量较大时</li><li>原生支持储存JS的对象</li><li>是个正经的数据库，意味着数据库能干的事它都能干</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点：</span></a></h4><ul><li>操作非常繁琐</li><li>本身有一定门槛</li></ul><p>关于indexedDB的使用基本使用步骤如下：</p><ul><li><p>打开数据库并且开始一个事务</p></li><li><p>创建一个 object store</p></li><li><p>构建一个请求来执行一些数据库操作，像增加或提取数据等。</p></li><li><p>通过监听正确类型的 DOM 事件以等待操作完成。</p></li><li><p>在操作结果上进行一些操作（可以在 request对象中找到）</p></li></ul><p>关于使用indexdb的使用会比较繁琐，大家可以通过使用Godb.js库进行缓存，最大化的降低操作难度</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><p>关于cookie、sessionStorage、localStorage三者的区别主要如下：</p><ul><li><p>存储大小：cookie数据大小不能超过4k，sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</p></li><li><p>有效时间：localStorage存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； sessionStorage数据在当前浏览器窗口关闭后自动删除；cookie设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</p></li><li><p>数据与服务器之间的交互方式，cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端； sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p></li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择：</p><ul><li>标记用户与跟踪用户行为的情况，推荐使用cookie</li><li>适合长期保存在本地的数据（令牌），推荐使用localStorage</li><li>敏感账号一次性登录，推荐使用sessionStorage</li><li>存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用indexedDB</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,58),v={href:"https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/chenstarx/GoDB.js",target:"_blank",rel:"noopener noreferrer"};function m(b,j){const e=l("router-link"),o=l("ExternalLinkIcon");return p(),c("div",null,[u,a("nav",k,[a("ul",null,[a("li",null,[s(e,{to:"#方式"},{default:t(()=>[n("方式")]),_:1}),a("ul",null,[a("li",null,[s(e,{to:"#cookie"},{default:t(()=>[n("cookie")]),_:1})]),a("li",null,[s(e,{to:"#localstorage"},{default:t(()=>[n("localStorage")]),_:1})]),a("li",null,[s(e,{to:"#sessionstorage"},{default:t(()=>[n("sessionStorage")]),_:1})])])]),a("li",null,[s(e,{to:"#区别"},{default:t(()=>[n("区别")]),_:1})]),a("li",null,[s(e,{to:"#应用场景"},{default:t(()=>[n("应用场景")]),_:1})]),a("li",null,[s(e,{to:"#参考文献"},{default:t(()=>[n("参考文献")]),_:1})])])]),g,a("ul",null,[a("li",null,[a("a",v,[n("https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ"),s(o)])]),a("li",null,[a("a",h,[n("https://github.com/chenstarx/GoDB.js"),s(o)])])])])}const f=i(d,[["render",m],["__file","index.html.vue"]]),S=JSON.parse('{"path":"/interview/js/storage/","title":"Javascript本地存储的方式有哪些？区别及应用场景？","lang":"zh-CN","frontmatter":{"title":"Javascript本地存储的方式有哪些？区别及应用场景？","sidebarDepth":0,"date":"2024-06-03T00:00:00.000Z"},"headers":[{"level":2,"title":"方式","slug":"方式","link":"#方式","children":[{"level":3,"title":"cookie","slug":"cookie","link":"#cookie","children":[]},{"level":3,"title":"localStorage","slug":"localstorage","link":"#localstorage","children":[]},{"level":3,"title":"sessionStorage","slug":"sessionstorage","link":"#sessionstorage","children":[]}]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"updatedTime":1717481375000,"contributors":[{"name":"chenxt","email":"chenxt@power-www.com","commits":1}]},"filePathRelative":"interview/js/storage/index.md"}');export{f as comp,S as data};
