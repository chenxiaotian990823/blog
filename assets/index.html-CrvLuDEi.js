import{_ as l,r as p,o as i,c,a as n,b as s,w as t,d as a,e as r}from"./app-DPz2NTkK.js";const u="/images/interview/excutionStack.png",d="/images/interview/excutionStackExample.png",k={},v=n("h1",{id:"javascript-中执行上下文和执行栈是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-中执行上下文和执行栈是什么"},[n("span",null,"JavaScript 中执行上下文和执行栈是什么？")])],-1),m={class:"table-of-contents"},b=r(`<h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h2><p>简单的来说，执行上下文是一种对 Javascript 代码执行环境的抽象概念，也就是说只要有 Javascript 代码运行，那么它就一定是运行在执行上下文中</p><p>执行上下文的类型分为三种：</p><ul><li>全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象</li><li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文</li><li>Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用</li></ul><p>下面给出全局上下文和函数上下文的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// global context</span>
<span class="token keyword">var</span> sayHello <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span>
<span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// execution context</span>
  <span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token string">&quot;David&quot;</span>
  last <span class="token operator">=</span> <span class="token string">&quot;Shariff&quot;</span>

  <span class="token keyword">function</span> <span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// execution context</span>
    <span class="token keyword">return</span> first
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// execution context</span>
    <span class="token keyword">return</span> last
  <span class="token punctuation">}</span>

  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1-16 行的部分为全局上下文，8 和 12 行是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问</p><p>可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p>执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段</p><h3 id="创建阶段" tabindex="-1"><a class="header-anchor" href="#创建阶段"><span>创建阶段</span></a></h3><p>创建阶段即当函数被调用，但未执行任何其内部代码之前</p><p>创建阶段做了三件事：</p><ul><li>确定 this 的值，也被称为 This Binding</li><li>LexicalEnvironment（词法环境） 组件被创建</li><li>VariableEnvironment（变量环境） 组件被创建</li></ul><p>伪代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  ThisBinding <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">this</span> value<span class="token operator">&gt;</span><span class="token punctuation">,</span>     <span class="token comment">// 确定this</span>
  LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 词法环境</span>
  VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 变量环境</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this-binding" tabindex="-1"><a class="header-anchor" href="#this-binding"><span>This Binding</span></a></h4><p>确定 this 的值我们前面讲到，this 的值是在执行的时候才能确认，定义的时候不能确认</p><h4 id="词法环境" tabindex="-1"><a class="header-anchor" href="#词法环境"><span>词法环境</span></a></h4><p>词法环境有两个组成部分：</p><ul><li><p>全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null，有一个全局对象，this 的值指向这个全局对象</p></li><li><p>函数环境：用户在函数中定义的变量被存储在环境记录中，包含了 arguments 对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境</p></li></ul><p>伪代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 全局执行上下文</span>
  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token comment">// 词法环境</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token comment">// 环境记录</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span>           <span class="token comment">// 全局环境</span>
      <span class="token comment">// 标识符绑定在这里</span>
      <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">&gt;</span>           <span class="token comment">// 对外部环境的引用</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 函数执行上下文</span>
  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token comment">// 词法环境</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 环境记录</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Declarative&quot;</span><span class="token punctuation">,</span>      <span class="token comment">// 函数环境</span>
      <span class="token comment">// 标识符绑定在这里      // 对外部环境的引用</span>
      <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global or outer <span class="token keyword">function</span> environment reference<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量环境" tabindex="-1"><a class="header-anchor" href="#变量环境"><span>变量环境</span></a></h4><p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性</p><p>在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定</p><p>举个例子</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">var</span> c

<span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token number">20</span>
  <span class="token keyword">return</span> e <span class="token operator">*</span> f <span class="token operator">*</span> g
<span class="token punctuation">}</span>

c <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上下文如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>

  <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">&gt;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 词法环境</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 标识符绑定在这里</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">&gt;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">&gt;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">multiply</span><span class="token operator">:</span> <span class="token operator">&lt;</span> func <span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 变量环境</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 标识符绑定在这里</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>

  <span class="token literal-property property">ThisBinding</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">&gt;</span><span class="token punctuation">,</span>

  <span class="token literal-property property">LexicalEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Declarative&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 标识符绑定在这里</span>
      <span class="token literal-property property">Arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>GlobalLexicalEnvironment<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">VariableEnvironment</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">EnvironmentRecord</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;Declarative&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 标识符绑定在这里</span>
      <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token operator">&lt;</span>GlobalLexicalEnvironment<span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>留意上面的代码，let和const定义的变量a和b在创建阶段没有被赋值，但var声明的变量从在创建阶段被赋值为undefined</p><p>这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中</p><p>但变量会被初始化为undefined(var声明的情况下)和保持uninitialized(未初始化状态)(使用let和const声明的情况下)</p><p>这就是变量提升的实际原因</p><h3 id="执行阶段" tabindex="-1"><a class="header-anchor" href="#执行阶段"><span>执行阶段</span></a></h3><p>在这阶段，执行变量赋值、代码执行</p><p>如果 Javascript 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 undefined 值</p><h3 id="回收阶段" tabindex="-1"><a class="header-anchor" href="#回收阶段"><span>回收阶段</span></a></h3><p>执行上下文出栈等待虚拟机回收执行上下文</p><h2 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈"><span>执行栈</span></a></h2><p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文</p><p><img src="`+u+`" alt="图片"></p><p>当Javascript引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中</p><p>每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中</p><p>引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Inside first function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Again inside first function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Inside second function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Inside Global Execution Context&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转化成图的形式</p><p><img src="`+d+'" alt="图片"></p><p>简单分析一下流程：</p><ul><li>创建全局上下文请压入执行栈</li><li>first函数被调用，创建函数执行上下文并压入栈</li><li>执行first函数过程遇到second函数，再创建一个函数执行上下文并压入栈</li><li>second函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文first函数</li><li>first函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文</li><li>所有代码执行完毕，全局上下文也会被推出栈中，程序结束</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>',52),h={href:"https://zhuanlan.zhihu.com/p/107552264",target:"_blank",rel:"noopener noreferrer"};function y(g,f){const e=p("router-link"),o=p("ExternalLinkIcon");return i(),c("div",null,[v,n("nav",m,[n("ul",null,[n("li",null,[s(e,{to:"#执行上下文"},{default:t(()=>[a("执行上下文")]),_:1})]),n("li",null,[s(e,{to:"#生命周期"},{default:t(()=>[a("生命周期")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#创建阶段"},{default:t(()=>[a("创建阶段")]),_:1})]),n("li",null,[s(e,{to:"#执行阶段"},{default:t(()=>[a("执行阶段")]),_:1})]),n("li",null,[s(e,{to:"#回收阶段"},{default:t(()=>[a("回收阶段")]),_:1})])])]),n("li",null,[s(e,{to:"#执行栈"},{default:t(()=>[a("执行栈")]),_:1})]),n("li",null,[s(e,{to:"#参考文献"},{default:t(()=>[a("参考文献")]),_:1})])])]),b,n("ul",null,[n("li",null,[n("a",h,[a("https://zhuanlan.zhihu.com/p/107552264"),s(o)])])])])}const _=l(k,[["render",y],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/interview/js/executionctx/","title":"JavaScript中执行上下文和执行栈是什么？","lang":"zh-CN","frontmatter":{"title":"JavaScript中执行上下文和执行栈是什么？","sidebarDepth":0,"date":"2024-06-03T00:00:00.000Z"},"headers":[{"level":2,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"创建阶段","slug":"创建阶段","link":"#创建阶段","children":[]},{"level":3,"title":"执行阶段","slug":"执行阶段","link":"#执行阶段","children":[]},{"level":3,"title":"回收阶段","slug":"回收阶段","link":"#回收阶段","children":[]}]},{"level":2,"title":"执行栈","slug":"执行栈","link":"#执行栈","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"updatedTime":1717481375000,"contributors":[{"name":"chenxt","email":"chenxt@power-www.com","commits":1}]},"filePathRelative":"interview/js/executionctx/index.md"}');export{_ as comp,w as data};
